# DP: Fix PR c++/70209, taken from the trunk.

gcc/cp/
2016-03-15  Marek Polacek  <polacek@redhat.com>

	PR c++/70209
	* tree.c (strip_typedefs): Call strip_typedefs again on the
	DECL_ORIGINAL_TYPE result.

gcc/testsuite/
2016-03-15  Marek Polacek  <polacek@redhat.com>

	PR c++/70209
	* g++.dg/ext/attribute-may-alias-4.C: New test.

--- a/src/gcc/testsuite/g++.dg/ext/attribute-may-alias-4.C
+++ b/src/gcc/testsuite/g++.dg/ext/attribute-may-alias-4.C
@@ -0,0 +1,17 @@
+// PR c++/70209
+
+struct V {
+  typedef float F;
+  template <typename S> void m_fn1(S);
+};
+
+template <typename> struct A {
+  typedef V::F Ta __attribute__((__may_alias__));
+  Ta *m_data;
+  void m_fn2(V &);
+};
+
+template <>
+void A<int>::m_fn2(V &p) {
+  p.m_fn1(m_data);
+}
Index: gcc/cp/tree.c
===================================================================
--- a/src/gcc/cp/tree.c
+++ b/src/gcc/cp/tree.c
@@ -1460,9 +1460,12 @@
   if (!result)
     {
       if (typedef_variant_p (t))
-	/* Explicitly get the underlying type, as TYPE_MAIN_VARIANT doesn't
-	   strip typedefs with attributes.  */
-	result = TYPE_MAIN_VARIANT (DECL_ORIGINAL_TYPE (TYPE_NAME (t)));
+	{
+	  /* Explicitly get the underlying type, as TYPE_MAIN_VARIANT doesn't
+	     strip typedefs with attributes.  */
+	  result = TYPE_MAIN_VARIANT (DECL_ORIGINAL_TYPE (TYPE_NAME (t)));
+	  result = strip_typedefs (result);
+	}
       else
 	result = TYPE_MAIN_VARIANT (t);
     }
